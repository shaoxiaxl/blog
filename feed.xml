<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>少侠的记事本</title>
    <link href="https://shaoxiaxl.github.io/blog/feed.xml" rel="self" />
    <link href="https://shaoxiaxl.github.io/blog" />
    <updated>2021-04-10T15:56:34+08:00</updated>
    <author>
        <name>ShaoXia</name>
    </author>
    <id>https://shaoxiaxl.github.io/blog</id>

    <entry>
        <title>django-filter的简单使用</title>
        <author>
            <name>ShaoXia</name>
        </author>
        <link href="https://shaoxiaxl.github.io/blog/django-filterde-jian-dan-shi-yong.html"/>
        <id>https://shaoxiaxl.github.io/blog/django-filterde-jian-dan-shi-yong.html</id>

        <updated>2021-04-10T15:56:34+08:00</updated>
            <summary>
                <![CDATA[
                    django-filter文档地址 INSTALLED_APPS = [ ... &#39;rest_framework&#39;, &#39;django_filters&#39;, &#39;crispy_forms&#39;, &#39;sample&#39;, ] REST_FRAMEWORK = { &#39;DEFAULT_FILTER_BACKENDS&#39;: (&#39;django_filters.rest_framework.DjangoFilterBackend&#39;,) }from django.db import models class Product(models.Model): name = models.CharField(max_length=255) price = models.DecimalField() description = models.TextField() release_date = models.DateField() manufacturer = models.ForeignKey(Manufacturer)###过滤器 进行价格或release_date进行过滤 import django_filters class ProductFilter(django_filters.FilterSet): name = django_filters.CharFilter(lookup_expr=&#39;iexact&#39;) class&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p><a href="https://django-filter.readthedocs.io/en/master/">django-filter文档地址</a></p>
<pre><code>INSTALLED_APPS = [
    ...
    &#39;rest_framework&#39;,
    &#39;django_filters&#39;, 
    &#39;crispy_forms&#39;,
    &#39;sample&#39;,
]

REST_FRAMEWORK = {
    &#39;DEFAULT_FILTER_BACKENDS&#39;: (&#39;django_filters.rest_framework.DjangoFilterBackend&#39;,) 
}</code></pre><pre><code>from django.db import models

class Product(models.Model):
    name = models.CharField(max_length=255)
    price = models.DecimalField()
    description = models.TextField()
    release_date = models.DateField()
    manufacturer = models.ForeignKey(Manufacturer)</code></pre><p>###过滤器
进行价格或release_date进行过滤</p>
<pre><code>import django_filters

class ProductFilter(django_filters.FilterSet):
    name = django_filters.CharFilter(lookup_expr=&#39;iexact&#39;)

    class Meta:
        model = Product
        fields = [&#39;price&#39;, &#39;release_date&#39;]</code></pre><p>###声明 过滤器</p>
<pre><code>    class ProductFilter(django_filters.FilterSet):
    price = django_filters.NumberFilter()
    price__gt = django_filters.NumberFilter(field_name=&#39;price&#39;, lookup_expr=&#39;gt&#39;)
    price__lt = django_filters.NumberFilter(field_name=&#39;price&#39;, lookup_expr=&#39;lt&#39;)

    release_year = django_filters.NumberFilter(field_name=&#39;release_date&#39;,lookup_expr=&#39;year&#39;)
    release_year__gt = django_filters.NumberFilter(field_name=&#39;release_date&#39;,lookup_expr=&#39;year__gt&#39;)
    release_year__lt = django_filters.NumberFilter(field_name=&#39;release_date&#39;,lookup_expr=&#39;year__lt&#39;)

    manufacturer__name = django_filters.CharFilter(lookup_expr=&#39;icontains&#39;)

    class Meta:
        model = Product</code></pre><h4 id="过滤器有两个主要参数：">过滤器有两个主要参数：</h4>
<ul>
<li>field_name：要过滤的模型字段的名称。您可以使用Django的<strong>语法遍历“关系路径”以过滤相关模型上的字段。当然，manufacturer</strong>name。</li>
<li>lookup_expr：过滤时要使用的字段查找。__ 可以再次使用Django的语法来支持查找转换。当然，year__gte。</li>
</ul>
<pre><code>import django_filters

class ProductFilter(django_filters.FilterSet):
    class Meta:
        model = Product
        fields = {
            &#39;price&#39;: [&#39;lt&#39;, &#39;gt&#39;],
            &#39;release_date&#39;: [&#39;exact&#39;, &#39;year__gt&#39;],
        }</code></pre><h4 id="覆盖默认过滤器">覆盖默认过滤器</h4>
<pre><code>class ProductFilter(django_filters.FilterSet):

    class Meta:
        model = Product
        fields = {
            &#39;name&#39;: [&#39;exact&#39;],
            &#39;release_date&#39;: [&#39;isnull&#39;],
        }
        filter_overrides = {
            models.CharField: {
                &#39;filter_class&#39;: django_filters.CharFilter,
                &#39;extra&#39;: lambda f: {
                    &#39;lookup_expr&#39;: &#39;icontains&#39;,
                },
            },
            models.BooleanField: {
                &#39;filter_class&#39;: django_filters.BooleanFilter,
                &#39;extra&#39;: lambda f: {
                    &#39;widget&#39;: forms.CheckboxInput,
                },
            },
        }</code></pre><p>###与DRF集成</p>
<pre><code>from django_filters import rest_framework as filters

class ProductList(generics.ListAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    filter_backends = (filters.DjangoFilterBackend,)
    filterset_fields = (&#39;category&#39;, &#39;in_stock&#39;)</code></pre><pre><code>from rest_framework import generics
from django_filters import rest_framework as filters
from myapp import Product


class ProductFilter(filters.FilterSet):
    min_price = filters.NumberFilter(field_name=&quot;price&quot;, lookup_expr=&#39;gte&#39;)
    max_price = filters.NumberFilter(field_name=&quot;price&quot;, lookup_expr=&#39;lte&#39;)

    class Meta:
        model = Product
        fields = [&#39;category&#39;, &#39;in_stock&#39;, &#39;min_price&#39;, &#39;max_price&#39;]


class ProductList(generics.ListAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    filter_backends = (filters.DjangoFilterBackend,)
    filterset_class = ProductFilter</code></pre><p>lookup_expr    |検索方法
exact    |完全一致
contains    |部分一致
startswith    |前方一致
endswith    |後方一致
regex    |正規表現</p>
<p>数值 日期</p>
<p>lookup_expr｜    検索方法
gt    ｜超
lt    ｜未満
gte    ｜以上
lte ｜以下</p>
<p>时间 日期
lookup_expr｜    検索方法
date    ｜日付(YYYY-M-D)
year    ｜年(YYYY)
month    ｜月(M)
day    ｜日(D)
week_day    ｜(1-7 日曜が1)
hour    ｜時(H)
minute    ｜分(m)
second    ｜秒(s)</p>
<pre><code>fullname = filters.CharFilter(lookup_expr=&#39;contains&#39;)
score = filters.NumberFilter(lookup_expr=&#39;gt&#39;)
is_checked = filters.BooleanFilter()
created_at = filters.DateTimeFilter(lookup_expr=&#39;gt&#39;)
score_range = filters.RangeFilter(name=&#39;score&#39;)
level = filters.ChoiceFilter(choices=Exam.LEVEL_SET)
level = filters.MultipleChoiceFilter(choices=Exam.LEVEL_SET)</code></pre>
            ]]>
        </content>
    </entry>
    <entry>
        <title>docker image内apt pip 改源</title>
        <author>
            <name>ShaoXia</name>
        </author>
        <link href="https://shaoxiaxl.github.io/blog/docker-image-neiapt-pip-gai-yuan.html"/>
        <id>https://shaoxiaxl.github.io/blog/docker-image-neiapt-pip-gai-yuan.html</id>

        <updated>2021-03-21T19:58:11+08:00</updated>
            <summary>
                <![CDATA[
                    FROM python:3.7-slim MAINTAINER liu8816 #alpine安装pandas慢,且不能从whl安装，只能编译安装，所以集成备用： # docker build -t py37:v1_slim . --network=host #支持中文 (需先安装了中文包) #ENV LC_ALL=zh_CN.utf8 #ENV LANG=zh_CN.utf8 #ENV LANGUAGE=zh_CN.utf8 ENV BOTTLE_VER 0.12.18 #COPY entrypoint.sh /entrypoint.sh COPY requirements.txt /data/requirements.txt #更新Alpine的软件源为国内（清华大学）的站点，因为从默认官源拉取实在太慢了。。。 # http://dl-cdn.alpinelinux.org/alpine/v3.11/main # https://mirrors.aliyun.com/alpine/ #set是shell的一个命令，因为shell的执行的过程中，如果有某个出错了，也会继续往下执行，set -ex作用就是，当下面的命令执行出错后，就退出执行，不在继续往下执行。 #RUN echo &quot;https://mirror.tuna.tsinghua.edu.cn/alpine/v3.4/main/&quot; &gt; /etc/apk/repositories RUN set -ex \&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <pre><code>FROM python:3.7-slim

MAINTAINER liu8816 
#alpine安装pandas慢,且不能从whl安装，只能编译安装，所以集成备用：
# docker build -t py37:v1_slim . --network=host

#支持中文 (需先安装了中文包)
#ENV LC_ALL=zh_CN.utf8
#ENV LANG=zh_CN.utf8
#ENV LANGUAGE=zh_CN.utf8

ENV BOTTLE_VER 0.12.18

#COPY entrypoint.sh /entrypoint.sh
COPY requirements.txt /data/requirements.txt

#更新Alpine的软件源为国内（清华大学）的站点，因为从默认官源拉取实在太慢了。。。
# http://dl-cdn.alpinelinux.org/alpine/v3.11/main
# https://mirrors.aliyun.com/alpine/
#set是shell的一个命令，因为shell的执行的过程中，如果有某个出错了，也会继续往下执行，set -ex作用就是，当下面的命令执行出错后，就退出执行，不在继续往下执行。
#RUN echo &quot;https://mirror.tuna.tsinghua.edu.cn/alpine/v3.4/main/&quot; &gt; /etc/apk/repositories
RUN set -ex \
    #容器通过代理上网时需开启 \
    &amp;&amp; export http_proxy=http://136.15.2.88:900/ \
    &amp;&amp; export https_proxy=http://136.15.2.88:900/ \

    &amp;&amp; echo &quot;# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释&quot;&gt;/etc/apt/sources.list \
    &amp;&amp; echo &quot;deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free&quot;&gt;&gt;/etc/apt/sources.list \
    &amp;&amp; echo &quot;# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free&quot;&gt;&gt;/etc/apt/sources.list \
    &amp;&amp; echo &quot;deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free&quot;&gt;&gt;/etc/apt/sources.list \
    &amp;&amp; echo &quot;# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free&quot;&gt;&gt;/etc/apt/sources.list \
    &amp;&amp; echo &quot;deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free&quot;&gt;&gt;/etc/apt/sources.list \
    &amp;&amp; echo &quot;# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free&quot;&gt;&gt;/etc/apt/sources.list \
    &amp;&amp; echo &quot;deb https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free&quot;&gt;&gt;/etc/apt/sources.list \
    &amp;&amp; echo &quot;# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free&quot;&gt;&gt;/etc/apt/sources.list \
    &amp;&amp; apt-get update \
    &amp;&amp; apt-get install gcc -y \
    #debian的镜像，没有ps命令，查个进程没法查, 安装procps,不安装gcc 则不能安装uwsgi模块
    &amp;&amp; apt-get install procps -y \
    #&amp;&amp; apt-get install uwsgi -y \

    &amp;&amp; pip config set global.index-url http://mirrors.aliyun.com/pypi/simple \
    &amp;&amp; pip config set install.trusted-host mirrors.aliyun.com \

    #解决时区问题
    &amp;&amp; cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtim \
    #Cython 否则有的pip安装失败 \
    &amp;&amp; pip install Cython \
    # 源码编译安装经常有错误，改为apt 安装 pip install uwsgi 功能可以不全 运行时缺少-w 等参数支持 \
        #其他不需要编译安装的可以统一放在一个requirements.txt文件中,先去掉版本号，可安装最新版或防止找不到出错 \
        #pymssql 直接安装不上（需py3.8目前不支持。说是python3.7以后platform.linux_distribution()被移除了导致的。）、psycopg2安装不上用psycopg2-binary即可
    &amp;&amp; pip install uwsgi \
    &amp;&amp; sed -ri &#39;/pymssql==/d&#39; /data/requirements.txt \
    &amp;&amp; sed -ri &#39;/psycopg2==/d&#39; /data/requirements.txt \
    &amp;&amp; sed -ri &#39;s/==[0-9]*(\.*[0-9])*//&#39; /data/requirements.txt \
    &amp;&amp; pip install --no-cache-dir -r /data/requirements.txt -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com \

    &amp;&amp; pip install numpy \
    &amp;&amp; pip install matplotlib \
        #==3.2.1 #指定版本号可能需要先生成wheel，再安装，比较慢 \
    &amp;&amp; pip install pandas \
      &amp;&amp; pip install pynacl \
      &amp;&amp; pip install gevent \
      &amp;&amp; pip install psycopg2-binary \
    #&amp;&amp; pip install bottle==$BOTTLE_VER \

    &amp;&amp; unset http_proxy &amp;&amp; unset https_proxy

RUN rm -rf /var/cache/apk/*
EXPOSE 8091 8797
CMD /bin/sh

    # set proper permission to run entrypoint script
#chmod a+x /entrypoint.sh

# This script installs APK and Pip prerequisites on container start, or ONBUILD. Notes:
#   * Reads the -a flags and /apk-requirements.txt for install requests
#   * Reads the -b flags and /build-requirements.txt for build packages -- removed when build is complete
#   * Reads the -p flags and /requirements.txt for Pip packages
#   * Reads the -r flag to specify a different file path for /requirements.txt
ENTRYPOINT [&quot;uwsgi&quot;,&quot;--ini&quot;,&quot;/uwsgi/uwsgi_m.ini&quot;]
#ENTRYPOINT [&quot;/bin/sh&quot;]


作者：lcb8816
链接：https://juejin.cn/post/6850418117462982664
来源：掘金
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。```</code></pre>
            ]]>
        </content>
    </entry>
    <entry>
        <title>CSS常用属性</title>
        <author>
            <name>ShaoXia</name>
        </author>
        <link href="https://shaoxiaxl.github.io/blog/css-chang-yong-shu-xing.html"/>
        <id>https://shaoxiaxl.github.io/blog/css-chang-yong-shu-xing.html</id>

        <updated>2020-11-20T22:00:11+08:00</updated>
            <summary>
                <![CDATA[
                    1. 选择器 元素类型 h1 {} 类 类型 .class {} ID选择器 #id {} 指向特定元素的类或者ID h1.class {} h1#id {} 标签选择器 a[title] {} 或者特定值a[herf=&#39;http://baidu.con&#39;] {} 运算符 article &gt; p {} 2. 布局 display block inline grid flex inline-block position table 关注table-layout:fixed float 其他的周围内容会在这个被浮动的元素周围环绕 3. 调整大小 min- max- width:100%图片拉伸到与容器相同的宽度&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2 id="1-选择器">1. 选择器</h2>
<ul>
<li>元素类型
<code>h1 {}</code></li>
<li>类 类型
<code>.class {}</code></li>
<li>ID选择器
<code>#id {}</code></li>
<li>指向特定元素的类或者ID
<code>h1.class {}
h1#id {}</code></li>
<li>标签选择器
<code>a[title] {}</code> 或者特定值<code>a[herf=&#39;http://baidu.con&#39;] {}</code></li>
<li>运算符
<code>article &gt; p {}</code></li>
</ul>
<h2 id="2-布局">2. 布局</h2>
<ul>
<li><h3 id="display">display</h3>
<ul>
<li>block</li>
<li>inline</li>
<li>grid</li>
<li>flex</li>
<li>inline-block</li>
</ul>
</li>
<li><h3 id="position">position</h3>
</li>
<li><h3 id="table">table</h3>
<ul>
<li>关注<code>table-layout:fixed</code></li>
</ul>
</li>
<li><h3 id="float">float</h3>
<ul>
<li>其他的周围内容会在这个被浮动的元素周围环绕</li>
</ul>
</li>
</ul>
<h2 id="3-调整大小-min--max-">3. 调整大小 min- max-</h2>
<ul>
<li><h3 id="width100图片拉伸到与容器相同的宽度"><code>width:100%</code>图片拉伸到与容器相同的宽度</h3>
</li>
<li><h3 id="max-width100-不会大于原始尺寸"><code>max-width:100%</code> 不会大于原始尺寸</h3>
</li>
<li><h3 id="object-fitcover-缩小图像，维持了图像的比例"><code>object-fit:cover</code> 缩小图像，维持了图像的比例</h3>
</li>
<li><h3 id="object-fitcontain-图像将缩放到足以放到盒子里的大小"><code>object-fit:contain</code> 图像将缩放到足以放到盒子里的大小</h3>
</li>
</ul>
<h2 id="4-溢出的内容">4. 溢出的内容</h2>
<ul>
<li><h3 id="overflow">overflow</h3>
<ul>
<li>visible</li>
<li>hidden</li>
<li>scroll</li>
<li>autio</li>
</ul>
</li>
<li><h3 id="overflow-yscroll-y轴方向滚动">overflow-y:scroll y轴方向滚动</h3>
</li>
<li><h3 id="overflow-x-x轴方向的滚动">overflow-x: x轴方向的滚动</h3>
</li>
</ul>
<h2 id="5-背景">5. 背景</h2>
<ul>
<li><h3 id="background-color">background-color</h3>
</li>
<li><h3 id="background-imagerurl">background-imager:url()</h3>
</li>
<li><h3 id="background-repeat-是否平铺图片-no-repeat">background-repeat 是否平铺图片 no-repeat</h3>
</li>
<li><h3 id="background-size">background-size</h3>
<ul>
<li>cover 浏览器将使图像足够大，使他完全覆盖了盒子区。</li>
<li>contain 浏览器将使图像的大小适合盒子内</li>
</ul>
</li>
<li><h3 id="background-postion-背景定位">background-postion 背景定位</h3>
<ul>
<li><code>background-postion: top 10% right 10px</code></li>
</ul>
</li>
<li><h3 id="background-attachment-背景页面滚动">background-attachment 背景页面滚动</h3>
<ul>
<li>scroll 元素的背景在页面滚动时候滚动</li>
<li>fixed 使元素的背景固定在视图端口上</li>
</ul>
</li>
</ul>
<h2 id="6-边框">6. 边框</h2>
<ul>
<li><h3 id="border">border</h3>
<ul>
<li><code>border: 1px solid black</code></li>
</ul>
</li>
<li><h3 id="border-radius-边框圆角">border-radius 边框圆角</h3>
</li>
</ul>
<h2 id="7伪类和伪元素">7.伪类和伪元素</h2>
<ul>
<li>:frist-child</li>
<li>用户行为的伪类<ul>
<li>:hover</li>
<li>:focus</li>
</ul>
</li>
<li>伪元素<ul>
<li>::frist-line</li>
</ul>
</li>
<li>::before和::after</li>
</ul>
<h2 id="8-css继承">8. css继承</h2>
<ul>
<li>inherit 开启继承</li>
<li>initial 设置属性值和浏览器默认样式相同。</li>
<li>unset 将属性重置为自然值，如果是自然继承那么就是inherit,否则是initial</li>
<li>!important 优先</li>
<li>内联&gt; id选择器&gt; 类选择器&gt; 元素选择器伪元素选择器</li>
</ul>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference">参考大全</a></p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>日常用的链接</title>
        <author>
            <name>ShaoXia</name>
        </author>
        <link href="https://shaoxiaxl.github.io/blog/ri-chang-yong-de-lian-jie.html"/>
        <id>https://shaoxiaxl.github.io/blog/ri-chang-yong-de-lian-jie.html</id>

        <updated>2020-11-10T14:34:16+08:00</updated>
            <summary>
                <![CDATA[
                    优秀的产品Product Hunt每天都会发布最好的新产品。 
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p><a href="https://www.producthunt.com/">优秀的产品</a>Product Hunt每天都会发布最好的新产品。</p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>ubuntu系统优化!</title>
        <author>
            <name>ShaoXia</name>
        </author>
        <link href="https://shaoxiaxl.github.io/blog/ubuntu-xi-tong-you-hua.html"/>
        <id>https://shaoxiaxl.github.io/blog/ubuntu-xi-tong-you-hua.html</id>
            <category term="优化"/>

        <updated>2020-11-20T22:20:24+08:00</updated>
            <summary>
                <![CDATA[
                    完整的/etc/sysctl.conf修改添加内容如下： 在/etc/sysctl.conf中添加如下内容 # 网络参数优化开始 net.ipv4.tcp_max_syn_backlog = 65536 net.core.netdev_max_backlog = 32768 net.core.somaxconn = 32768 net.core.wmem_default = 8388608 net.core.rmem_default = 8388608 net.core.rmem_max = 16777216 net.core.wmem_max = 16777216 net.ipv4.tcp_timestamps = 0 net.ipv4.tcp_synack_retries = 2 net.ipv4.tcp_syn_retries = 2 net.ipv4.tcp_tw_recycle = 1 #net.ipv4.tcp_tw_len = 1 net.ipv4.tcp_tw_reuse = 1 net.ipv4.tcp_mem =&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>完整的/etc/sysctl.conf修改添加内容如下：
在/etc/sysctl.conf中添加如下内容</p>
<pre><code class="language-shell"># 网络参数优化开始
net.ipv4.tcp_max_syn_backlog = 65536
net.core.netdev_max_backlog =  32768
net.core.somaxconn = 32768

net.core.wmem_default = 8388608
net.core.rmem_default = 8388608
net.core.rmem_max = 16777216
net.core.wmem_max = 16777216

net.ipv4.tcp_timestamps = 0
net.ipv4.tcp_synack_retries = 2
net.ipv4.tcp_syn_retries = 2

net.ipv4.tcp_tw_recycle = 1
#net.ipv4.tcp_tw_len = 1
net.ipv4.tcp_tw_reuse = 1

net.ipv4.tcp_mem = 94500000 915000000 927000000
net.ipv4.tcp_max_orphans = 3276800

#net.ipv4.tcp_fin_timeout = 30
#net.ipv4.tcp_keepalive_time = 120
net.ipv4.ip_local_port_range = 1024  65535
#网络参数优化结束
#系统共享内存大小优化开始
kernel.shmmax = 134217728
#系统共享内存大小优化结束
#添加内容结束</code></pre>
<p>修改完成后运行以下命令使参数生效</p>
<pre><code>/sbin/sysctl -p</code></pre><p>以上，如有不足，欢迎大家指正和追加，谢谢！</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Day1,MACD和KDJ策略</title>
        <author>
            <name>ShaoXia</name>
        </author>
        <link href="https://shaoxiaxl.github.io/blog/day1macd-hekdj-ce-lue.html"/>
        <id>https://shaoxiaxl.github.io/blog/day1macd-hekdj-ce-lue.html</id>
            <category term="财经"/>

        <updated>2020-11-20T23:31:48+08:00</updated>
            <summary>
                <![CDATA[
                    思路 毫无疑问很多人分析市场都是从MACD和KDJ开始的，MACD是一种趋势分析指标。KDJ的中文叫随机指标，是技术分析中的一种动量分析方法，采用超买和超卖的概念。 MACD的输入参数有两个: KDJ KDJ 的输入参数： KDJ 交易信号 当价格与随机指标发生牛势背离（即价格下跌而随机指标指向上方），而%K线与%D线在超卖区（高于80%或低于20%）发生交叉，便是买入信号；反之则是卖出信号。%K线与%D线的简单交叉经常发生，很多时候并不可靠。投资者多在%D线筑顶或筑底后，等待%K线出现急剧的逆转并与%D线交叉。当市场波动性较大时，也可使用加权移动平均来定义%D线，以平整价格短时内大幅波动对指标产生的影响。 
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>思路
毫无疑问很多人分析市场都是从MACD和KDJ开始的，MACD是一种趋势分析指标。KDJ的中文叫随机指标，是技术分析中的一种动量分析方法，采用超买和超卖的概念。</p>
<p>MACD的输入参数有两个:</p>
<ol>
<li>EMA(12)；</li>
<li>EMA(26)；
MACD三种交易讯号：</li>
<li>差离值（DIF值）与讯号线（DEM值，又称MACD值）相交；当差离值（DIF）从下而上穿过讯号线（DEM），为买进讯号；相反若从上而下穿越，为卖出讯号。买卖讯号可能出现频繁，需要配合其他指标（如：RSI、KD）一同分析。</li>
<li>差离值与零轴相交；差离值由下而上穿过零轴代表市场气氛利好股价，相反由上而下则代表利淡股价。差离值与讯号线均在零轴上方时，被称为多头市场，反之，则被称为空头市场。</li>
<li>股价与差离值的背离。当股价创新低，但MACD并没有相应创新低（牛市背离），视为利好（利多）讯息，股价跌势或将完结。相反，若股价创新高，但MACD并没有相应创新高（熊市背离），视为利淡（利空）讯息。同样地，若股价与棒形图不配合，也可作类似结论。
总而言之MACD是一种中长线的研判指标。当股市强烈震荡或股价变化巨大时，可能会给出错误的信号。所以在决定股票操作时，应该谨慎参考其他指标，以及市场状况，不能完全信任差离值的单一研判，避免造成损失。</li>
</ol>
<p>KDJ
KDJ 的输入参数：
KDJ 交易信号
当价格与随机指标发生牛势背离（即价格下跌而随机指标指向上方），而%K线与%D线在超卖区（高于80%或低于20%）发生交叉，便是买入信号；反之则是卖出信号。%K线与%D线的简单交叉经常发生，很多时候并不可靠。投资者多在%D线筑顶或筑底后，等待%K线出现急剧的逆转并与%D线交叉。当市场波动性较大时，也可使用加权移动平均来定义%D线，以平整价格短时内大幅波动对指标产生的影响。</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>分化度的趋势策略，用于指数的策略</title>
        <author>
            <name>ShaoXia</name>
        </author>
        <link href="https://shaoxiaxl.github.io/blog/fen-hua-du-de-qu-shi-ce-lue-yong-yu-zhi-shu-de-ce-lue.html"/>
        <id>https://shaoxiaxl.github.io/blog/fen-hua-du-de-qu-shi-ce-lue-yong-yu-zhi-shu-de-ce-lue.html</id>

        <updated>2020-11-20T23:30:04+08:00</updated>
            <summary>
                <![CDATA[
                    分化度简介 在固定时间截面下，给定一个市场指数及其成分股的区间收益，则所有成份股 区间收益率的分化程度即为股票分化度，用收益率的标准差表示。第 t 期的股 票分化度 RD， 追涨杀跌，有趋势才有收益，没趋势时候，可能会损失。趋势确定后买入，趋势破灭后卖出，有滞后性，赶不及。 常用的指标是均线和通道突破，均线交易多，胜率低。通道交易少，胜率高，持股久。 当较小的股票分化度变化，引起了同方向较大的指数涨跌幅变化时，趋势结束的概率会增加。顺着这 个思路，我们以 4 周动量策略为基础，构建基于股票分化度的指数趋势策略。 如果本周相对上周指数涨跌幅的变化，大于 N 倍的股票分化度变化，则判断市 场出现了特殊的状况，空仓观望；否则为正常的市场状况，按照正常的 4 周动 量信号行动。 即，空仓时，趋势策略出现买入信号，最近某个周期的指数涨幅，大于指数成分股票的分化度的N倍，则判断市场 出现特殊状况，空仓。否则为正常买入。 持仓时，某个周期的指数涨幅，大于指数成分股票的分化度的N倍，则判断市场 出现特殊状况，卖出。卖出信号正常卖出。 参考 
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h3 id="分化度简介">分化度简介</h3>
<p>在固定时间截面下，给定一个市场指数及其成分股的区间收益，则所有成份股
区间收益率的分化程度即为股票分化度，用收益率的标准差表示。第 t 期的股
票分化度 RD，</p>
<h3 id="趋势策略简介">趋势策略简介</h3>
<p>追涨杀跌，有趋势才有收益，没趋势时候，可能会损失。趋势确定后买入，趋势破灭后卖出，有滞后性，赶不及。
常用的指标是均线和通道突破，均线交易多，胜率低。通道交易少，胜率高，持股久。</p>
<h3 id="分化趋势策略">分化趋势策略</h3>
<p>当较小的股票分化度变化，引起了同方向较大的指数涨跌幅变化时，趋势结束的概率会增加。顺着这
个思路，我们以 4 周动量策略为基础，构建基于股票分化度的指数趋势策略。
如果本周相对上周指数涨跌幅的变化，大于 N 倍的股票分化度变化，则判断市
场出现了特殊的状况，空仓观望；否则为正常的市场状况，按照正常的 4 周动
量信号行动。
即，空仓时，趋势策略出现买入信号，最近某个周期的指数涨幅，大于指数成分股票的分化度的N倍，则判断市场
出现特殊状况，空仓。否则为正常买入。
持仓时，某个周期的指数涨幅，大于指数成分股票的分化度的N倍，则判断市场
出现特殊状况，卖出。卖出信号正常卖出。</p>
<p><a href="http://pg.jrj.com.cn/acc/Res/CN_RES/INVEST/2017/11/23/10ed4c24-f80f-45d6-bded-af7f6b131b8e.pdf">参考</a></p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>使用python替换windows文件图标</title>
        <author>
            <name>ShaoXia</name>
        </author>
        <link href="https://shaoxiaxl.github.io/blog/shi-yongpython-ti-huanwindows-wen-jian-tu-biao.html"/>
        <id>https://shaoxiaxl.github.io/blog/shi-yongpython-ti-huanwindows-wen-jian-tu-biao.html</id>

        <updated>2020-11-20T23:26:51+08:00</updated>
            <summary>
                <![CDATA[
                    # encoding: utf-8 from win32com.shell import shell, shellcon import winerror import urllib import subprocess driveRoots = [] currentFolderUri = None syncStatuses = None def nxlog(msg): #记录调试日志 logFile = open(&quot;C:\\Users\\Administrator\\driveOverlay.log&quot;, &quot;a&quot;) logFile.write(msg + &quot;\n&quot;) logFile.close() class IconOverlay: #可以自动生成 _reg_clsid_ = &#39;{B4123171-F6D6-4FAD-9402-8F6B04E439C7}&#39; _reg_progid_ = &#39;NuxeoDrive.PythonOverlayHandler&#39; _reg_desc_ =&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <pre><code># encoding: utf-8
from win32com.shell import shell, shellcon
import winerror
import urllib
import subprocess
driveRoots = []
currentFolderUri = None
syncStatuses = None
def nxlog(msg):
    #记录调试日志
    logFile = open(&quot;C:\\Users\\Administrator\\driveOverlay.log&quot;, &quot;a&quot;)
    logFile.write(msg + &quot;\n&quot;)
    logFile.close()
class IconOverlay:
    #可以自动生成
    _reg_clsid_ = &#39;{B4123171-F6D6-4FAD-9402-8F6B04E439C7}&#39;
    _reg_progid_ = &#39;NuxeoDrive.PythonOverlayHandler&#39;
    _reg_desc_ = &#39;Icon Overlay Handler for Nuxeo Drive&#39;
    _public_methods_ = [&#39;GetOverlayInfo&#39;, &#39;GetPriority&#39;, &#39;IsMemberOf&#39;]
    _com_interfaces_ = [shell.IID_IShellIconOverlayIdentifier]
    def __init__(self):
        nxlog(&quot;Starting&quot;)
    def GetOverlayInfo(self):
        nxlog(&quot;return Normal icon&quot;)
        return (r&#39;C:\sync\logo.ico&#39;, 0, shellcon.ISIOI_ICONFILE)
    def GetPriority(self):
        return 50
    #判断方法
    def IsMemberOf(self, fname, attributes):
        nxlog(&quot;calling isMember on &quot; + fname)
        if (&quot;nuxeo&quot; in fname):
            if (&quot;finan&quot; in fname):
                return winerror.S_FALSE
            else:
                nxlog(&quot;return ok for synced&quot;)
                return winerror.S_OK
        return winerror.S_FALSE
class PendingIconOverlay:
    _reg_clsid_ = &#39;{BE8CEBD1-5AB8-403F-9984-F34251A1705C}&#39;
    _reg_progid_ = &#39;NuxeoDrive.PythonPendingOverlayHandler&#39;
    _reg_desc_ = &#39;Icon Overlay Handler for Nuxeo Drive Pending files&#39;
    _public_methods_ = [&#39;GetOverlayInfo&#39;, &#39;GetPriority&#39;, &#39;IsMemberOf&#39;]
    _com_interfaces_ = [shell.IID_IShellIconOverlayIdentifier]
    def __init__(self):
        nxlog(&quot;Starting&quot;)
    def GetOverlayInfo(self):
        nxlog(&quot;return Modified icon&quot;)
        return (r&#39;C:\sync\logo.ico&#39;, 0, shellcon.ISIOI_ICONFILE)
    def GetPriority(self):
        return 50
    def IsMemberOf(self, fname, attributes):
        nxlog(&quot;calling isMember on &quot; + fname)
        if (&quot;nuxeo&quot; in fname):
            if (&quot;finan&quot; in fname):
                nxlog(&quot;return ok for pending&quot;)
                return winerror.S_OK
            else:
                return winerror.S_FALSE
        return winerror.S_FALSE
if __name__ == &#39;__main__&#39;:
    import win32api
    import win32con
    import win32com.server.register
    win32com.server.register.UseCommandLine(IconOverlay)
    keyname = r&#39;Software\Microsoft\Windows\CurrentVersion\Explorer\ShellIconOverlayIdentifiers\  NuxeoDriveOverlay&#39;
    key = win32api.RegCreateKey(win32con.HKEY_LOCAL_MACHINE, keyname)
    win32api.RegSetValue(key, None, win32con.REG_SZ, IconOverlay._reg_clsid_)
    win32com.server.register.UseCommandLine(PendingIconOverlay)
    keyname = r&#39;Software\Microsoft\Windows\CurrentVersion\Explorer\ShellIconOverlayIdentifiers\  NuxeoDrivePendingOverlay&#39;
    key = win32api.RegCreateKey(win32con.HKEY_LOCAL_MACHINE, keyname)
    win32api.RegSetValue(key, None, win32con.REG_SZ,
PendingIconOverlay._reg_clsid_)</code></pre>
            ]]>
        </content>
    </entry>
    <entry>
        <title>python装饰器</title>
        <author>
            <name>ShaoXia</name>
        </author>
        <link href="https://shaoxiaxl.github.io/blog/python-zhuang-shi-qi.html"/>
        <id>https://shaoxiaxl.github.io/blog/python-zhuang-shi-qi.html</id>

        <updated>2020-11-20T23:08:52+08:00</updated>
            <summary>
                <![CDATA[
                    import time def function_performance_statistics(trace_this=True): if trace_this: def performace_statistics_delegate(func): def counter(*args, **kwargs): start = time.clock() func(*args, **kwargs) end =time.clock() print &#39;used time: %d&#39; % (end - start, ) return counter else: def performace_statistics_delegate(func): return func return performace_statistics_delegate @function_performance_statistics(True) def add(x, y): time.sleep(3) print &#39;add result: %d&#39;&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <pre><code>import time  

def function_performance_statistics(trace_this=True):  
    if trace_this:  
       def performace_statistics_delegate(func):  
            def counter(*args, **kwargs):  
                start = time.clock()  
                func(*args, **kwargs)  
                end =time.clock()  
                print &#39;used time: %d&#39; % (end - start, )  
            return counter  
    else:  
       def performace_statistics_delegate(func):  
            return func  
    return performace_statistics_delegate  

@function_performance_statistics(True)  
def add(x, y):  
    time.sleep(3)  
    print &#39;add result: %d&#39; % (x + y,)  

@function_performance_statistics(False)  
def mul(x, y=1):  
    print &#39;mul result: %d&#39; % (x * y,)  

add(1, 1)  
mul(10)</code></pre>
            ]]>
        </content>
    </entry>
    <entry>
        <title>使用opencv夹剪辑视频</title>
        <author>
            <name>ShaoXia</name>
        </author>
        <link href="https://shaoxiaxl.github.io/blog/shi-yongopencv-jia-jian-ji-shi-pin.html"/>
        <id>https://shaoxiaxl.github.io/blog/shi-yongopencv-jia-jian-ji-shi-pin.html</id>

        <updated>2020-11-20T23:25:40+08:00</updated>
            <summary>
                <![CDATA[
                    opencv介绍 安装 opencv2支持python2.x版本 因为opencv依赖numpy所以我们要先安装numpy 安装完成后，打开IDE确保安装成功 C:\libpython&gt;python.exe Python 2.7.13 (v2.7.13:a06454b1afa1, Dec 17 2016, 20:53:40) [MSC v.1500 64 bit (AMD64)] on win32 Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information. &gt;&gt;&gt; import numpy &gt;&gt;&gt; 下载OpenCV安装包，安装后解压 打开解压目录 opencv/build/python/2.7 复制cv2.pyd 到你python的Python27/lib/site-packeges目录下 打开IDE确保安装正常 &gt;&gt;&gt; print cv2.__version__ &#39;2.4.13.3&#39; 官方教程 按照他官方的教程到这一步导入cv2包没有问题，就算安装成功了。但是在实际使用中打开视频文件的时候总是失败，网上搜同样的问题一大把，不清楚到底是bug，还是电脑环境问题（怀疑的问题系统环境变量path）。&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h3 id="opencv介绍">opencv介绍</h3>
<h4 id="安装">安装</h4>
<p>opencv2支持python2.x版本</p>
<ol>
<li><p>因为opencv依赖numpy所以我们要先安装numpy  </p>
<ul>
<li>可以这样安装sudo pip install numpy</li>
<li>或者下载安装包安装 numpy下载</li>
</ul>
</li>
<li><p>安装完成后，打开IDE确保安装成功</p>
<pre><code>C:\libpython&gt;python.exe
Python 2.7.13 (v2.7.13:a06454b1afa1, Dec 17 2016, 20:53:40) [MSC v.1500 64 bit (AMD64)] on win32
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&gt;&gt;&gt; import numpy
&gt;&gt;&gt;</code></pre></li>
<li><p>下载OpenCV安装包，安装后解压</p>
</li>
<li><p>打开解压目录 opencv/build/python/2.7</p>
</li>
<li><p>复制cv2.pyd 到你python的Python27/lib/site-packeges目录下</p>
</li>
<li><p>打开IDE确保安装正常</p>
<pre><code class="language-&gt;&gt;&gt;">&gt;&gt;&gt; print cv2.__version__
&#39;2.4.13.3&#39;</code></pre>
<p><a href="https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_setup/py_setup_in_windows/py_setup_in_windows.html#install-opencv-python-in-windows">官方教程</a></p>
</li>
</ol>
<p>按照他官方的教程到这一步导入cv2包没有问题，就算安装成功了。但是在实际使用中打开视频文件的时候总是失败，网上搜同样的问题一大把，不清楚到底是bug，还是电脑环境问题（怀疑的问题系统环境变量path）。</p>
<p><a href="https://stackoverflow.com/questions/11699298/opencv-2-4-videocapture-not-working-on-windows">stackoverflow上讨论和解决方法</a></p>
<p>我的解决方法是把 <code>J:\opencv\opencv\sources\3rdparty\ffmpeg</code>目录下的<code>opencv_ffmpeg_64.dll</code>文件复制到我python目录下并改名为<code>opencv_ffmpeg{opencv版本号}_64.dll</code>我的是<code>opencv_ffmpeg2413_64.dll</code></p>
<p>使用
打开一个视频文件
#打开视频文件</p>
<pre><code>cap = cv2.VideoCapture(in_path)   
if False == cap.isOpened():  #判断打开是否成功
    print(&quot;error&quot;)
else:
    print(&quot;ok&quot;)</code></pre><p>读取视频
获取解码并返回视频下一帧，失败返回false。
<code>ret, frame = cap.read()</code>
获取视频属性
可以用cap.get(propId)方法获得视频的属性，propId的范围为0-18，每个数代表视频的一个属性，官方说明看这里VideoCapture::get。</p>
<p>常用参数</p>
<ul>
<li>propId |    属性</li>
<li>0    | 当前文件位置时间</li>
<li>1    |下一帧</li>
<li>3    | 宽度</li>
<li>4|    高度</li>
<li>5    | 帧速</li>
<li>6    | 视频编码格式</li>
<li>7    | 文件总帧数
还有一种方法来获取视频参数</li>
</ul>
<p>帧速
<code>fps = cap.get(cv2.cv.CV_CAP_PROP_FPS)</code>
#宽高<br><code>size = (int(cap.get(cv2.cv.CV_CAP_PROP_FRAME_WIDTH)),   
        int(cap.get(cv2.cv.CV_CAP_PROP_FRAME_HEIGHT)))</code>
设置视频属性
可以用<code>cap.set(propId, value)</code>方法设置视频的属性<code>VideoCapture::set</code></p>
<ul>
<li><p>propId |    属性</p>
</li>
<li><p>0 |    视频文件的当前位置，以毫秒为单位。</p>
</li>
<li><p>1 |    下一帧解码/捕获帧的索引</p>
</li>
<li><p>2 |    视频文件的相对位置：0 - 开始，1 - 结束。</p>
</li>
<li><p>3 |    视频流的宽度</p>
</li>
<li><p>4 |    视频流的高度</p>
</li>
<li><p>5 |    帧速</p>
</li>
<li><p>6 |    编解码器的4个字符代码。</p>
</li>
<li><p>7 |    视频文件中的帧数
使用opencv剪辑视频</p>
<pre><code>def cut_video(in_path, out_path, start, end):
  cap = cv2.VideoCapture(in_path)
  fps = cap.get(cv2.cv.CV_CAP_PROP_FPS)
  size = (int(cap.get(cv2.cv.CV_CAP_PROP_FRAME_WIDTH)),   
          int(cap.get(cv2.cv.CV_CAP_PROP_FRAME_HEIGHT)))
  fourcc = cv2.cv.CV_FOURCC(*&#39;XVID&#39;)
  out = cv2.VideoWriter(out_path, fourcc, fps, size)

  for index in range(start,end):
      cap.set(1, index)
      ret, frame = cap.read()
      cv2.waitKey(1000/int(fps))
      cv2.imshow(&quot;video&quot;, frame)#边查看
      out.write(frame)
  cap.release() #释放
  out.release()</code></pre></li>
</ul>

            ]]>
        </content>
    </entry>
</feed>
